<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
    <meta name="GENERATOR" content="Mozilla/4.7 [en] (Win95; I) [Netscape]">
    <meta http-equiv="pragma" content="no-cache">
    <meta http-equiv="expires" content="0">
    <title></title>
    <style>
	#input [type="text"], [type="text"], [type="password"]
	{
		color: #000000;
		background-color: #FFFFFF;
		border: 1px solid #BCBCBC;
		font-family: "Verdana, Arial, Helvetica, sans-serif";
		font-size: 12px;
		color: #000000;	
	}
	#input [type="submit"], [type="submit"], [type="reset"]
	{
		color: #000000;
		background-color: #CCCCCC;
		border: 1px solid #000000;
	}
    </style>
   <script language="JavaScript1.2" src="productinfo.js"></script>
   <script language="JavaScript1.2" src="com_utlils.js"></script>
   <SCRIPT language="JavaScript">

   // ------------start util.js

var HIGHLIGHTED_COLOR = "#d1f5d1";
var lastUnhighlightedColors = new Array();

var isNav = false;
var isIE = false;

if (parseInt(navigator.appVersion) >= 4) {
	if (navigator.appName == "Netscape") {
		isNav = true;
	}
	else {
		isIE = true;
	}
}

function handleNavResize()
{
	location.reload();
	return false;
}

if (isNav) {
	window.captureEvents(Event.RESIZE);
	window.onresize = handleNavResize;
}

function highlightCellAnyColor(cellID, color)
{
	if (document.getElementById) {
		var cell = document.getElementById(cellID);
		if (cell != null) {
			lastUnhighlightedColors[cellID] = cell.style.backgroundColor;
			cell.style.backgroundColor = color;
		}
	}
	else if (document.all) {
		var cell = document.all[cellID];
		if (cell != null) {
			lastUnhighlightedColors[cellID] = cell.style.backgroundColor;
			cell.style.backgroundColor = color;
		}
	}
	else if (document.layers) {
		var cell = document.layers[cellID];
		if (cell != null) {
			lastUnhighlightedColors[cellID] = cell.bgColor;
			cell.bgColor = color;
		}
	}
}

function highlightCell(cellID)
{
	highlightCellAnyColor(cellID, HIGHLIGHTED_COLOR);
}

function unhighlightCell(cellID)
{
	if (document.getElementById) {
		var cell = document.getElementById(cellID);
		if (cell != null) {
			cell.style.backgroundColor = lastUnhighlightedColors[cellID];
		}
	}
	else if (document.all) {
		var cell = document.all[cellID];
		if (cell != null) {
			cell.style.backgroundColor = lastUnhighlightedColors[cellID];
		}
	}
	else if (document.layers) {
		var cell = document.layers[cellID];
		if (cell != null) {
			cell.bgColor = lastUnhighlightedColors[cellID];
		}
	}
}

function setLayerVisibility(id, isVisible)
{
	var layer;
	if (document.getElementById) {
		layer = document.getElementById(id).style;
	}
	else if (document.all) {
		layer = document.all[id].style;
	}
	else if (document.layers) {
		layer = document.layers[id];
	}
	layer.visibility = isVisible ? "visible" : "hidden";
}

function showLayer(id)
{
	setLayerVisibility(id, true);
}

function hideLayer(id)
{
	setLayerVisibility(id, false);
}
   // ------------end util.js
var biRadixBase = 2;
var biRadixBits = 16;
var bitsPerDigit = biRadixBits;
var biRadix = 1 << 16; // = 2^16 = 65536
var biHalfRadix = biRadix >>> 1;
var biRadixSquared = biRadix * biRadix;
var maxDigitVal = biRadix - 1;
var maxInteger = 9999999999999998; 
var maxDigits;
var ZERO_ARRAY;
var bigZero, bigOne;

function setMaxDigits(value)
{
	maxDigits = value;
	ZERO_ARRAY = new Array(maxDigits);
	for (var iza = 0; iza < ZERO_ARRAY.length; iza++) ZERO_ARRAY[iza] = 0;
	bigZero = new BigInt();
	bigOne = new BigInt();
	bigOne.digits[0] = 1;
}

setMaxDigits(20);

var dpl10 = 15;
var lr10 = biFromNumber(1000000000000000);

function BigInt(flag)
{
	if (typeof flag == "boolean" && flag == true) {
		this.digits = null;
	}
	else {
		this.digits = ZERO_ARRAY.slice(0);
	}
	this.isNeg = false;
}

function biFromDecimal(s)
{
	var isNeg = s.charAt(0) == '-';
	var i = isNeg ? 1 : 0;
	var result;
	while (i < s.length && s.charAt(i) == '0') ++i;
	if (i == s.length) {
		result = new BigInt();
	}
	else {
		var digitCount = s.length - i;
		var fgl = digitCount % dpl10;
		if (fgl == 0) fgl = dpl10;
		result = biFromNumber(Number(s.substr(i, fgl)));
		i += fgl;
		while (i < s.length) {
			result = biAdd(biMultiply(result, lr10),
			               biFromNumber(Number(s.substr(i, dpl10))));
			i += dpl10;
		}
		result.isNeg = isNeg;
	}
	return result;
}

function biCopy(bi)
{
	var result = new BigInt(true);
	result.digits = bi.digits.slice(0);
	result.isNeg = bi.isNeg;
	return result;
}

function biFromNumber(i)
{
	var result = new BigInt();
	result.isNeg = i < 0;
	i = Math.abs(i);
	var j = 0;
	while (i > 0) {
		result.digits[j++] = i & maxDigitVal;
		i = Math.floor(i / biRadix);
	}
	return result;
}

function reverseStr(s)
{
	var result = "";
	for (var i = s.length - 1; i > -1; --i) {
		result += s.charAt(i);
	}
	return result;
}

var hexatrigesimalToChar = new Array(
 '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
 'u', 'v', 'w', 'x', 'y', 'z'
);

function biToString(x, radix)
	// 2 <= radix <= 36
{
	var b = new BigInt();
	b.digits[0] = radix;
	var qr = biDivideModulo(x, b);
	var result = hexatrigesimalToChar[qr[1].digits[0]];
	while (biCompare(qr[0], bigZero) == 1) {
		qr = biDivideModulo(qr[0], b);
		digit = qr[1].digits[0];
		result += hexatrigesimalToChar[qr[1].digits[0]];
	}
	return (x.isNeg ? "-" : "") + reverseStr(result);
}

function biToDecimal(x)
{
	var b = new BigInt();
	b.digits[0] = 10;
	var qr = biDivideModulo(x, b);
	var result = String(qr[1].digits[0]);
	while (biCompare(qr[0], bigZero) == 1) {
		qr = biDivideModulo(qr[0], b);
		result += String(qr[1].digits[0]);
	}
	return (x.isNeg ? "-" : "") + reverseStr(result);
}

var hexToChar = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                          'a', 'b', 'c', 'd', 'e', 'f');

function digitToHex(n)
{
	var mask = 0xf;
	var result = "";
	for (i = 0; i < 4; ++i) {
		result += hexToChar[n & mask];
		n >>>= 4;
	}
	return reverseStr(result);
}

function biToHex(x)
{
	var result = "";
	var n = biHighIndex(x);
	for (var i = biHighIndex(x); i > -1; --i) {
		result += digitToHex(x.digits[i]);
	}
	return result;
}

function charToHex(c)
{
	var ZERO = 48;
	var NINE = ZERO + 9;
	var littleA = 97;
	var littleZ = littleA + 25;
	var bigA = 65;
	var bigZ = 65 + 25;
	var result;

	if (c >= ZERO && c <= NINE) {
		result = c - ZERO;
	} else if (c >= bigA && c <= bigZ) {
		result = 10 + c - bigA;
	} else if (c >= littleA && c <= littleZ) {
		result = 10 + c - littleA;
	} else {
		result = 0;
	}
	return result;
}

function hexToDigit(s)
{
	var result = 0;
	var sl = Math.min(s.length, 4);
	for (var i = 0; i < sl; ++i) {
		result <<= 4;
		result |= charToHex(s.charCodeAt(i))
	}
	return result;
}

function biFromHex(s)
{
	var result = new BigInt();
	var sl = s.length;
	for (var i = sl, j = 0; i > 0; i -= 4, ++j) {
		result.digits[j] = hexToDigit(s.substr(Math.max(i - 4, 0), Math.min(i, 4)));
	}
	return result;
}

function biFromString(s, radix)
{
	var isNeg = s.charAt(0) == '-';
	var istop = isNeg ? 1 : 0;
	var result = new BigInt();
	var place = new BigInt();
	place.digits[0] = 1; // radix^0
	for (var i = s.length - 1; i >= istop; i--) {
		var c = s.charCodeAt(i);
		var digit = charToHex(c);
		var biDigit = biMultiplyDigit(place, digit);
		result = biAdd(result, biDigit);
		place = biMultiplyDigit(place, radix);
	}
	result.isNeg = isNeg;
	return result;
}

function biDump(b)
{
	return (b.isNeg ? "-" : "") + b.digits.join(" ");
}

function biAdd(x, y)
{
	var result;

	if (x.isNeg != y.isNeg) {
		y.isNeg = !y.isNeg;
		result = biSubtract(x, y);
		y.isNeg = !y.isNeg;
	}
	else {
		result = new BigInt();
		var c = 0;
		var n;
		for (var i = 0; i < x.digits.length; ++i) {
			n = x.digits[i] + y.digits[i] + c;
			result.digits[i] = n % biRadix;
			c = Number(n >= biRadix);
		}
		result.isNeg = x.isNeg;
	}
	return result;
}

function biSubtract(x, y)
{
	var result;
	if (x.isNeg != y.isNeg) {
		y.isNeg = !y.isNeg;
		result = biAdd(x, y);
		y.isNeg = !y.isNeg;
	} else {
		result = new BigInt();
		var n, c;
		c = 0;
		for (var i = 0; i < x.digits.length; ++i) {
			n = x.digits[i] - y.digits[i] + c;
			result.digits[i] = n % biRadix;
			if (result.digits[i] < 0) result.digits[i] += biRadix;
			c = 0 - Number(n < 0);
		}
		if (c == -1) {
			c = 0;
			for (var i = 0; i < x.digits.length; ++i) {
				n = 0 - result.digits[i] + c;
				result.digits[i] = n % biRadix;
				if (result.digits[i] < 0) result.digits[i] += biRadix;
				c = 0 - Number(n < 0);
			}
			result.isNeg = !x.isNeg;
		} else {
			result.isNeg = x.isNeg;
		}
	}
	return result;
}

function biHighIndex(x)
{
	var result = x.digits.length - 1;
	while (result > 0 && x.digits[result] == 0) --result;
	return result;
}

function biNumBits(x)
{
	var n = biHighIndex(x);
	var d = x.digits[n];
	var m = (n + 1) * bitsPerDigit;
	var result;
	for (result = m; result > m - bitsPerDigit; --result) {
		if ((d & 0x8000) != 0) break;
		d <<= 1;
	}
	return result;
}

function biMultiply(x, y)
{
	var result = new BigInt();
	var c;
	var n = biHighIndex(x);
	var t = biHighIndex(y);
	var u, uv, k;

	for (var i = 0; i <= t; ++i) {
		c = 0;
		k = i;
		for (j = 0; j <= n; ++j, ++k) {
			uv = result.digits[k] + x.digits[j] * y.digits[i] + c;
			result.digits[k] = uv & maxDigitVal;
			c = uv >>> biRadixBits;
			//c = Math.floor(uv / biRadix);
		}
		result.digits[i + n + 1] = c;
	}
	// Someone give me a logical xor, please.
	result.isNeg = x.isNeg != y.isNeg;
	return result;
}

function biMultiplyDigit(x, y)
{
	var n, c, uv;

	result = new BigInt();
	n = biHighIndex(x);
	c = 0;
	for (var j = 0; j <= n; ++j) {
		uv = result.digits[j] + x.digits[j] * y + c;
		result.digits[j] = uv & maxDigitVal;
		c = uv >>> biRadixBits;
		//c = Math.floor(uv / biRadix);
	}
	result.digits[1 + n] = c;
	return result;
}

function arrayCopy(src, srcStart, dest, destStart, n)
{
	var m = Math.min(srcStart + n, src.length);
	for (var i = srcStart, j = destStart; i < m; ++i, ++j) {
		dest[j] = src[i];
	}
}

var highBitMasks = new Array(0x0000, 0x8000, 0xC000, 0xE000, 0xF000, 0xF800,
                             0xFC00, 0xFE00, 0xFF00, 0xFF80, 0xFFC0, 0xFFE0,
                             0xFFF0, 0xFFF8, 0xFFFC, 0xFFFE, 0xFFFF);

function biShiftLeft(x, n)
{
	var digitCount = Math.floor(n / bitsPerDigit);
	var result = new BigInt();
	arrayCopy(x.digits, 0, result.digits, digitCount,
	          result.digits.length - digitCount);
	var bits = n % bitsPerDigit;
	var rightBits = bitsPerDigit - bits;
	for (var i = result.digits.length - 1, i1 = i - 1; i > 0; --i, --i1) {
		result.digits[i] = ((result.digits[i] << bits) & maxDigitVal) |
		                   ((result.digits[i1] & highBitMasks[bits]) >>>
		                    (rightBits));
	}
	result.digits[0] = ((result.digits[i] << bits) & maxDigitVal);
	result.isNeg = x.isNeg;
	return result;
}

var lowBitMasks = new Array(0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,
                            0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,
                            0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF);

function biShiftRight(x, n)
{
	var digitCount = Math.floor(n / bitsPerDigit);
	var result = new BigInt();
	arrayCopy(x.digits, digitCount, result.digits, 0,
	          x.digits.length - digitCount);
	var bits = n % bitsPerDigit;
	var leftBits = bitsPerDigit - bits;
	for (var i = 0, i1 = i + 1; i < result.digits.length - 1; ++i, ++i1) {
		result.digits[i] = (result.digits[i] >>> bits) |
		                   ((result.digits[i1] & lowBitMasks[bits]) << leftBits);
	}
	result.digits[result.digits.length - 1] >>>= bits;
	result.isNeg = x.isNeg;
	return result;
}

function biMultiplyByRadixPower(x, n)
{
	var result = new BigInt();
	arrayCopy(x.digits, 0, result.digits, n, result.digits.length - n);
	return result;
}

function biDivideByRadixPower(x, n)
{
	var result = new BigInt();
	arrayCopy(x.digits, n, result.digits, 0, result.digits.length - n);
	return result;
}

function biModuloByRadixPower(x, n)
{
	var result = new BigInt();
	arrayCopy(x.digits, 0, result.digits, 0, n);
	return result;
}

function biCompare(x, y)
{
	if (x.isNeg != y.isNeg) {
		return 1 - 2 * Number(x.isNeg);
	}
	for (var i = x.digits.length - 1; i >= 0; --i) {
		if (x.digits[i] != y.digits[i]) {
			if (x.isNeg) {
				return 1 - 2 * Number(x.digits[i] > y.digits[i]);
			} else {
				return 1 - 2 * Number(x.digits[i] < y.digits[i]);
			}
		}
	}
	return 0;
}

function biDivideModulo(x, y)
{
	var nb = biNumBits(x);
	var tb = biNumBits(y);
	var origYIsNeg = y.isNeg;
	var q, r;
	if (nb < tb) {
		// |x| < |y|
		if (x.isNeg) {
			q = biCopy(bigOne);
			q.isNeg = !y.isNeg;
			x.isNeg = false;
			y.isNeg = false;
			r = biSubtract(y, x);
			// Restore signs, 'cause they're references.
			x.isNeg = true;
			y.isNeg = origYIsNeg;
		} else {
			q = new BigInt();
			r = biCopy(x);
		}
		return new Array(q, r);
	}

	q = new BigInt();
	r = x;

	// Normalize Y.
	var t = Math.ceil(tb / bitsPerDigit) - 1;
	var lambda = 0;
	while (y.digits[t] < biHalfRadix) {
		y = biShiftLeft(y, 1);
		++lambda;
		++tb;
		t = Math.ceil(tb / bitsPerDigit) - 1;
	}
	// Shift r over to keep the quotient constant. We'll shift the
	// remainder back at the end.
	r = biShiftLeft(r, lambda);
	nb += lambda; // Update the bit count for x.
	var n = Math.ceil(nb / bitsPerDigit) - 1;

	var b = biMultiplyByRadixPower(y, n - t);
	while (biCompare(r, b) != -1) {
		++q.digits[n - t];
		r = biSubtract(r, b);
	}
	for (var i = n; i > t; --i) {
    var ri = (i >= r.digits.length) ? 0 : r.digits[i];
    var ri1 = (i - 1 >= r.digits.length) ? 0 : r.digits[i - 1];
    var ri2 = (i - 2 >= r.digits.length) ? 0 : r.digits[i - 2];
    var yt = (t >= y.digits.length) ? 0 : y.digits[t];
    var yt1 = (t - 1 >= y.digits.length) ? 0 : y.digits[t - 1];
		if (ri == yt) {
			q.digits[i - t - 1] = maxDigitVal;
		} else {
			q.digits[i - t - 1] = Math.floor((ri * biRadix + ri1) / yt);
		}

		var c1 = q.digits[i - t - 1] * ((yt * biRadix) + yt1);
		var c2 = (ri * biRadixSquared) + ((ri1 * biRadix) + ri2);
		while (c1 > c2) {
			--q.digits[i - t - 1];
			c1 = q.digits[i - t - 1] * ((yt * biRadix) | yt1);
			c2 = (ri * biRadix * biRadix) + ((ri1 * biRadix) + ri2);
		}

		b = biMultiplyByRadixPower(y, i - t - 1);
		r = biSubtract(r, biMultiplyDigit(b, q.digits[i - t - 1]));
		if (r.isNeg) {
			r = biAdd(r, b);
			--q.digits[i - t - 1];
		}
	}
	r = biShiftRight(r, lambda);
	// Fiddle with the signs and stuff to make sure that 0 <= r < y.
	q.isNeg = x.isNeg != origYIsNeg;
	if (x.isNeg) {
		if (origYIsNeg) {
			q = biAdd(q, bigOne);
		} else {
			q = biSubtract(q, bigOne);
		}
		y = biShiftRight(y, lambda);
		r = biSubtract(y, r);
	}
	// Check for the unbelievably stupid degenerate case of r == -0.
	if (r.digits[0] == 0 && biHighIndex(r) == 0) r.isNeg = false;

	return new Array(q, r);
}

function biDivide(x, y)
{
	return biDivideModulo(x, y)[0];
}

function biModulo(x, y)
{
	return biDivideModulo(x, y)[1];
}

function biMultiplyMod(x, y, m)
{
	return biModulo(biMultiply(x, y), m);
}

function biPow(x, y)
{
	var result = bigOne;
	var a = x;
	while (true) {
		if ((y & 1) != 0) result = biMultiply(result, a);
		y >>= 1;
		if (y == 0) break;
		a = biMultiply(a, a);
	}
	return result;
}

function biPowMod(x, y, m)
{
	var result = bigOne;
	var a = x;
	var k = y;
	while (true) {
		if ((k.digits[0] & 1) != 0) result = biMultiplyMod(result, a, m);
		k = biShiftRight(k, 1);
		if (k.digits[0] == 0 && biHighIndex(k) == 0) break;
		a = biMultiplyMod(a, a, m);
	}
	return result;
}

// --------- end BidInt.js

// --- start Barret.js
function BarrettMu(m)
{
	this.modulus = biCopy(m);
	this.k = biHighIndex(this.modulus) + 1;
	var b2k = new BigInt();
	b2k.digits[2 * this.k] = 1; // b2k = b^(2k)
	this.mu = biDivide(b2k, this.modulus);
	this.bkplus1 = new BigInt();
	this.bkplus1.digits[this.k + 1] = 1; // bkplus1 = b^(k+1)
	this.modulo = BarrettMu_modulo;
	this.multiplyMod = BarrettMu_multiplyMod;
	this.powMod = BarrettMu_powMod;
}

function BarrettMu_modulo(x)
{
	var q1 = biDivideByRadixPower(x, this.k - 1);
	var q2 = biMultiply(q1, this.mu);
	var q3 = biDivideByRadixPower(q2, this.k + 1);
	var r1 = biModuloByRadixPower(x, this.k + 1);
	var r2term = biMultiply(q3, this.modulus);
	var r2 = biModuloByRadixPower(r2term, this.k + 1);
	var r = biSubtract(r1, r2);
	if (r.isNeg) {
		r = biAdd(r, this.bkplus1);
	}
	var rgtem = biCompare(r, this.modulus) >= 0;
	while (rgtem) {
		r = biSubtract(r, this.modulus);
		rgtem = biCompare(r, this.modulus) >= 0;
	}
	return r;
}

function BarrettMu_multiplyMod(x, y)
{
	/*
	x = this.modulo(x);
	y = this.modulo(y);
	*/
	var xy = biMultiply(x, y);
	return this.modulo(xy);
}

function BarrettMu_powMod(x, y)
{
	var result = new BigInt();
	result.digits[0] = 1;
	var a = x;
	var k = y;
	while (true) {
		if ((k.digits[0] & 1) != 0) result = this.multiplyMod(result, a);
		k = biShiftRight(k, 1);
		if (k.digits[0] == 0 && biHighIndex(k) == 0) break;
		a = this.multiplyMod(a, a);
	}
	return result;
}
// ---- end Barret.js

// --- rsa.js
function RSAKeyPair(encryptionExponent, modulus)
{
	this.e = biFromHex(encryptionExponent);
	this.m = biFromHex(modulus);
	// We can do two bytes per digit, so
	// chunkSize = 2 * (number of digits in modulus - 1).
	// Since biHighIndex returns the high index, not the number of digits, 1 has
	// already been subtracted.
	this.chunkSize = 2 * biHighIndex(this.m);
	this.radix = 16;
	this.barrett = new BarrettMu(this.m);
}

function twoDigit(n)
{
	return (n < 10 ? "0" : "") + String(n);
}

function encryptedString(key, s)
{
	var a = new Array();
	var sl = s.length;
	var i = 0;
	while (i < sl) {
		a[i] = s.charCodeAt(i);
		i++;
	}

	while (a.length % key.chunkSize != 0) {
		a[i++] = 0;
	}

	var al = a.length;
	var result = "";
	var j, k, block;
	for (i = 0; i < al; i += key.chunkSize) {
		block = new BigInt();
		j = 0;
		for (k = i; k < i + key.chunkSize; ++j) {
			block.digits[j] = a[k++];
			block.digits[j] += a[k++] << 8;
		}
		var crypt = key.barrett.powMod(block, key.e);
		var text = key.radix == 16 ? biToHex(crypt) : biToString(crypt, key.radix);
		result += text + " ";
	}
	return result.substring(0, result.length - 1); // Remove last space.
}

function decryptedString(key, s)
{
	var blocks = s.split(" ");
	var result = "";
	var i, j, block;
	for (i = 0; i < blocks.length; ++i) {
		var bi;
		if (key.radix == 16) {
			bi = biFromHex(blocks[i]);
		}
		else {
			bi = biFromString(blocks[i], key.radix);
		}
		block = key.barrett.powMod(bi, key.d);
		for (j = 0; j <= biHighIndex(block); ++j) {
			result += String.fromCharCode(block.digits[j] & 255,
			                              block.digits[j] >> 8);
		}
	}
	// Remove trailing null, if any.
	if (result.charCodeAt(result.length - 1) == 0) {
		result = result.substring(0, result.length - 1);
	}
	return result;
}
// --- rsa.js

    <!--
      function setInit()
      {
        document.login.username.focus();
	  createKey();
      }

      function array(n)
      {
        for(i=0;i<n;i++) this[i]=0;
        this.length=n;
      }

      function integer(n) { return n%(0xffffffff+1); }

      function shr(a,b)
      {
        a=integer(a);
        b=integer(b);
        if (a-0x80000000>=0)
        {
          a=a%0x80000000;
          a>>=b;
          a+=0x40000000>>(b-1);
        }
        else
          a>>=b;
        return a;
      }

      function shl1(a)
      {
        a=a%0x80000000;
        if (a&0x40000000==0x40000000)
        {
          a-=0x40000000;
          a*=2;
          a+=0x80000000;
        }
        else
          a*=2;
        return a;
      }

      function shl(a,b)
      {
        a=integer(a);
        b=integer(b);
        for (var i=0;i<b;i++)
          a=shl1(a);
        return a;
      }

      function and(a,b)
      {
        a=integer(a);
        b=integer(b);
        var t1=(a-0x80000000);
        var t2=(b-0x80000000);
        if (t1>=0)
          if (t2>=0)
            return ((t1&t2)+0x80000000);
          else
            return (t1&b);
        else
          if (t2>=0)
            return (a&t2);
          else
            return (a&b);
      }

      function or(a,b)
      {
        a=integer(a);
        b=integer(b);
        var t1=(a-0x80000000);
        var t2=(b-0x80000000);
        if (t1>=0)
          if (t2>=0)
            return ((t1|t2)+0x80000000);
          else
            return ((t1|b)+0x80000000);
        else
          if (t2>=0)
            return ((a|t2)+0x80000000);
          else
            return (a|b);
      }

      function xor(a,b)
      {
        a=integer(a);
        b=integer(b);
        var t1=(a-0x80000000);
        var t2=(b-0x80000000);
        if (t1>=0)
          if (t2>=0)
            return (t1^t2);
          else
            return ((t1^b)+0x80000000);
        else
          if (t2>=0)
            return ((a^t2)+0x80000000);
          else
            return (a^b);
      }

      function not(a)
      {
        a=integer(a);
        return (0xffffffff-a);
      }


      var state = new array(4);
      var count = new array(2);
      count[0] = 0;
      count[1] = 0;
      var buffer = new array(64);
      var transformBuffer = new array(16);
      var digestBits = new array(16);

      var S11 = 7;
      var S12 = 12;
      var S13 = 17;
      var S14 = 22;
      var S21 = 5;
      var S22 = 9;
      var S23 = 14;
      var S24 = 20;
      var S31 = 4;
      var S32 = 11;
      var S33 = 16;
      var S34 = 23;
      var S41 = 6;
      var S42 = 10;
      var S43 = 15;
      var S44 = 21;

      function F(x,y,z)
      {
        return or(and(x,y),and(not(x),z));
      }

      function G(x,y,z)
      {
        return or(and(x,z),and(y,not(z)));
      }

      function H(x,y,z)
      {
        return xor(xor(x,y),z);
      }

      function I(x,y,z)
      {
        return xor(y ,or(x , not(z)));
      }

      function rotateLeft(a,n)
      {
        return or(shl(a, n),(shr(a,(32 - n))));
      }

      function FF(a,b,c,d,x,s,ac)
      {
        a = a+F(b, c, d) + x + ac;
        a = rotateLeft(a, s);
        a = a+b;
        return a;
      }

      function GG(a,b,c,d,x,s,ac)
      {
        a = a+G(b, c, d) +x + ac;
        a = rotateLeft(a, s);
        a = a+b;
        return a;
      }

      function HH(a,b,c,d,x,s,ac)
      {
        a = a+H(b, c, d) + x + ac;
        a = rotateLeft(a, s);
        a = a+b;
        return a;
      }

      function II(a,b,c,d,x,s,ac)
      {
        a = a+I(b, c, d) + x + ac;
        a = rotateLeft(a, s);
        a = a+b;
        return a;
      }

      function transform(buf,offset)
      {
        var a=0, b=0, c=0, d=0;
        var x = transformBuffer;

        a = state[0];
        b = state[1];
        c = state[2];
        d = state[3];

        for (i = 0; i < 16; i++)
        {
          x[i] = and(buf[i*4+offset],0xff);
          for (j = 1; j < 4; j++)
          {
            x[i]+=shl(and(buf[i*4+j+offset] ,0xff), j * 8);
          }
        }

        /* Round 1 */
        a = FF ( a, b, c, d, x[ 0], S11, 0xd76aa478); /* 1 */
        d = FF ( d, a, b, c, x[ 1], S12, 0xe8c7b756); /* 2 */
        c = FF ( c, d, a, b, x[ 2], S13, 0x242070db); /* 3 */
        b = FF ( b, c, d, a, x[ 3], S14, 0xc1bdceee); /* 4 */
        a = FF ( a, b, c, d, x[ 4], S11, 0xf57c0faf); /* 5 */
        d = FF ( d, a, b, c, x[ 5], S12, 0x4787c62a); /* 6 */
        c = FF ( c, d, a, b, x[ 6], S13, 0xa8304613); /* 7 */
        b = FF ( b, c, d, a, x[ 7], S14, 0xfd469501); /* 8 */
        a = FF ( a, b, c, d, x[ 8], S11, 0x698098d8); /* 9 */
        d = FF ( d, a, b, c, x[ 9], S12, 0x8b44f7af); /* 10 */
        c = FF ( c, d, a, b, x[10], S13, 0xffff5bb1); /* 11 */
        b = FF ( b, c, d, a, x[11], S14, 0x895cd7be); /* 12 */
        a = FF ( a, b, c, d, x[12], S11, 0x6b901122); /* 13 */
        d = FF ( d, a, b, c, x[13], S12, 0xfd987193); /* 14 */
        c = FF ( c, d, a, b, x[14], S13, 0xa679438e); /* 15 */
        b = FF ( b, c, d, a, x[15], S14, 0x49b40821); /* 16 */

        /* Round 2 */
        a = GG ( a, b, c, d, x[ 1], S21, 0xf61e2562); /* 17 */
        d = GG ( d, a, b, c, x[ 6], S22, 0xc040b340); /* 18 */
        c = GG ( c, d, a, b, x[11], S23, 0x265e5a51); /* 19 */
        b = GG ( b, c, d, a, x[ 0], S24, 0xe9b6c7aa); /* 20 */
        a = GG ( a, b, c, d, x[ 5], S21, 0xd62f105d); /* 21 */
        d = GG ( d, a, b, c, x[10], S22,  0x2441453); /* 22 */
        c = GG ( c, d, a, b, x[15], S23, 0xd8a1e681); /* 23 */
        b = GG ( b, c, d, a, x[ 4], S24, 0xe7d3fbc8); /* 24 */
        a = GG ( a, b, c, d, x[ 9], S21, 0x21e1cde6); /* 25 */
        d = GG ( d, a, b, c, x[14], S22, 0xc33707d6); /* 26 */
        c = GG ( c, d, a, b, x[ 3], S23, 0xf4d50d87); /* 27 */
        b = GG ( b, c, d, a, x[ 8], S24, 0x455a14ed); /* 28 */
        a = GG ( a, b, c, d, x[13], S21, 0xa9e3e905); /* 29 */
        d = GG ( d, a, b, c, x[ 2], S22, 0xfcefa3f8); /* 30 */
        c = GG ( c, d, a, b, x[ 7], S23, 0x676f02d9); /* 31 */
        b = GG ( b, c, d, a, x[12], S24, 0x8d2a4c8a); /* 32 */

        /* Round 3 */
        a = HH ( a, b, c, d, x[ 5], S31, 0xfffa3942); /* 33 */
        d = HH ( d, a, b, c, x[ 8], S32, 0x8771f681); /* 34 */
        c = HH ( c, d, a, b, x[11], S33, 0x6d9d6122); /* 35 */
        b = HH ( b, c, d, a, x[14], S34, 0xfde5380c); /* 36 */
        a = HH ( a, b, c, d, x[ 1], S31, 0xa4beea44); /* 37 */
        d = HH ( d, a, b, c, x[ 4], S32, 0x4bdecfa9); /* 38 */
        c = HH ( c, d, a, b, x[ 7], S33, 0xf6bb4b60); /* 39 */
        b = HH ( b, c, d, a, x[10], S34, 0xbebfbc70); /* 40 */
        a = HH ( a, b, c, d, x[13], S31, 0x289b7ec6); /* 41 */
        d = HH ( d, a, b, c, x[ 0], S32, 0xeaa127fa); /* 42 */
        c = HH ( c, d, a, b, x[ 3], S33, 0xd4ef3085); /* 43 */
        b = HH ( b, c, d, a, x[ 6], S34,  0x4881d05); /* 44 */
        a = HH ( a, b, c, d, x[ 9], S31, 0xd9d4d039); /* 45 */
        d = HH ( d, a, b, c, x[12], S32, 0xe6db99e5); /* 46 */
        c = HH ( c, d, a, b, x[15], S33, 0x1fa27cf8); /* 47 */
        b = HH ( b, c, d, a, x[ 2], S34, 0xc4ac5665); /* 48 */

        /* Round 4 */
        a = II ( a, b, c, d, x[ 0], S41, 0xf4292244); /* 49 */
        d = II ( d, a, b, c, x[ 7], S42, 0x432aff97); /* 50 */
        c = II ( c, d, a, b, x[14], S43, 0xab9423a7); /* 51 */
        b = II ( b, c, d, a, x[ 5], S44, 0xfc93a039); /* 52 */
        a = II ( a, b, c, d, x[12], S41, 0x655b59c3); /* 53 */
        d = II ( d, a, b, c, x[ 3], S42, 0x8f0ccc92); /* 54 */
        c = II ( c, d, a, b, x[10], S43, 0xffeff47d); /* 55 */
        b = II ( b, c, d, a, x[ 1], S44, 0x85845dd1); /* 56 */
        a = II ( a, b, c, d, x[ 8], S41, 0x6fa87e4f); /* 57 */
        d = II ( d, a, b, c, x[15], S42, 0xfe2ce6e0); /* 58 */
        c = II ( c, d, a, b, x[ 6], S43, 0xa3014314); /* 59 */
        b = II ( b, c, d, a, x[13], S44, 0x4e0811a1); /* 60 */
        a = II ( a, b, c, d, x[ 4], S41, 0xf7537e82); /* 61 */
        d = II ( d, a, b, c, x[11], S42, 0xbd3af235); /* 62 */
        c = II ( c, d, a, b, x[ 2], S43, 0x2ad7d2bb); /* 63 */
        b = II ( b, c, d, a, x[ 9], S44, 0xeb86d391); /* 64 */

        state[0] +=a;
        state[1] +=b;
        state[2] +=c;
        state[3] +=d;
      }


      function update(b)
      {
        var index,i;

        index = and(shr(count[0],3) , 0x3f);
        if (count[0]<0xffffffff-7)
          count[0] += 8;
        else
        {
          count[1]++;
          count[0]-=0xffffffff+1;
          count[0]+=8;
        }
        buffer[index] = and(b,0xff);
        if (index  >= 63)
        {
          transform(buffer, 0);
        }
      }

      function finish()
      {
        var bits = new array(8);
        var padding;
        var i=0, index=0, padLen=0;

        for (i = 0; i < 4; i++)
        {
          bits[i] = and(shr(count[0],(i * 8)), 0xff);
        }
        for (i = 0; i < 4; i++)
        {
          bits[i+4]=and(shr(count[1],(i * 8)), 0xff);
        }
        index = and(shr(count[0], 3) ,0x3f);
        padLen = (index < 56) ? (56 - index) : (120 - index);
        padding = new array(64);
        padding[0] = 0x80;

        for (i=0;i<padLen;i++)
          update(padding[i]);

        for (i=0;i<8;i++)
          update(bits[i]);

        for (i = 0; i < 4; i++)
        {
          for (j = 0; j < 4; j++)
          {
            digestBits[i*4+j] = and(shr(state[i], (j * 8)) , 0xff);
          }
        }
      }

      function init()
      {
        count[0]=count[1] = 0;
        state[0] = 0x67452301;
        state[1] = 0xefcdab89;
        state[2] = 0x98badcfe;
        state[3] = 0x10325476;
        for (i = 0; i < digestBits.length; i++)
          digestBits[i] = 0;
      }


      /* End of the MD5 algorithm */

      function hexa(n)
      {
        var hexa_h = "0123456789abcdef";
        var hexa_c="";
        var hexa_m=n;
        for (hexa_i=0;hexa_i<8;hexa_i++)
        {
          hexa_c=hexa_h.charAt(Math.abs(hexa_m)%16)+hexa_c;
          hexa_m=Math.floor(hexa_m/16);
        }
        return hexa_c;
      }

      var ascii="01234567890123456789012345678901" +
                " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"+
                "[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";

      function MD5(entree)
      {
        var l,s,k,ka,kb,kc,kd;

        init();
        for (k=0;k<entree.length;k++)
        {
          l=entree.charAt(k);
          update(ascii.lastIndexOf(l));
        }
        finish();
        ka=kb=kc=kd=0;
        for (i=0;i<4;i++) ka+=shl(digestBits[15-i], (i*8));
        for (i=4;i<8;i++) kb+=shl(digestBits[15-i], ((i-4)*8));
        for (i=8;i<12;i++) kc+=shl(digestBits[15-i], ((i-8)*8));
        for (i=12;i<16;i++) kd+=shl(digestBits[15-i], ((i-12)*8));
        s=hexa(kd)+hexa(kc)+hexa(kb)+hexa(ka);
        return s;
      }
 
      function doChallengeResponse()
      {
        if (document.forms[0].username.value == "") {
	    alert("Enter the User Name");
            return false;
	}
        str = document.login.username.value +":"+
        MD5(document.login.pwd.value) + ":" +
        document.login.challenge.value;
        document.login.response.value = MD5(str);
	// Encrypt password using RSA Algorithm and send to the HTTP Server        
        document.login.password.value = encryptedString(key, document.forms[0].pwd.value);
        //alert(document.login.password.value);
        document.login.challenge.value = document.login.challenge.value;  
        document.cookie = "Name-Login=" + document.login.username.value + ";EXPIRES=" + getexpirydateUTC(1);
	return true;
      }
	//RSA
	var key;
	function createKey()
	{		
		var keySize = 128; 
		setMaxDigits(19);
		key = new RSAKeyPair("5ABB", "01D7777C38863AEC21BA2D91EE0FAF51");	
	}

	function getexpirydateUTC(nodays)
	{
	  Today = new Date();
	  milli = Date.parse(Today);
	  Today.setTime(milli+ nodays*24*60*60*1000);
	  return Today.toUTCString();
	}
    //-->
   </SCRIPT>
 </head>

  <body bgcolor="#FFFFFF" text="#000000" link="#003399" vlink="#666666" alink="#CC0000" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0" onLoad="setInit();setProductName(this.document);setProductNameAsTitle(this.document);">
     <table width="100%" border="0" cellpadding="0" cellspacing="0">
      <tr>
        <td align="center" valign="middle">
          <font color="#726B63" size="6" face="Verdana, Arial, Helvetica, sans-serif">&nbsp;</font>
        </td>
      </tr>
      <tr>
        <td align="center" valign="middle">
          <font color="#726B63" size="6" face="Verdana, Arial, Helvetica, sans-serif">&nbsp;</font>
        </td>
      </tr>
      <tr>
        <td width="109" align="left" valign="bottom"><!--img src="company.gif" width="150" height="72"--></td>
        <td align="center" valign="middle">          
            <img src='images/VortiqaLogo.gif' alt="VortiQa" border="0"><br/>
            <span id="productNameDiv"></span>
        </td>
        <td width="100" align="right" valign="top"></td>
      </tr>
      <tr>
        <td align="center" valign="middle">
          <font color="#726B63" size="2" face="Verdana, Arial, Helvetica, sans-serif">&nbsp;</font>
        </td>
      </tr>
       <tr>
        <td align="left" valign="bottom">&nbsp;</td>
        <td align="center" valign="middle">
           <form name="login" action="login.igw" method="post" onSubmit="return doChallengeResponse();">
            <table width="400" border="0" align="center" cellpadding="5" cellspacing="0" >
              <tr>
                <td align="right">
                  <font size="2" face="Verdana, Arial, Helvetica, sans-serif">User Name:</font>
                </td>
                <td align="left">
                  <font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                    <input type="text" name="username" value="" size=20 maxlength=32>
                  </font>
                </td>
              </tr>
              <tr>
                <td align="right">
                  <font size="2" face="Verdana, Arial, Helvetica, sans-serif">Password:</font>
                </td>
                <td align="left">
                  <font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                    <input type="password" name="pwd" size=20 maxlength=32>
                  </font>
                </td>
              </tr>
              <tr>
                <td align="right" nowrap>
                  <font size="2" face="Verdana, Arial, Helvetica, sans-serif">&nbsp;</font>
                </td>
                <td nowrap align="left">
                  <font size="2" face="Verdana, Arial, Helvetica, sans-serif">
                    <input type="submit" name="submitbtn" value="Login">
                    <input type="reset" name="Reset">
                  </font>
                  <input type="hidden" name="challenge" value="[IGW_CHALLENGE_VALUE]">
                  <input type="hidden" name="response" value="">
		  <input type="hidden" name="password" value="">
                </td>
              </tr>
            </table>
          </form>
        </td>
        <td align="right" valign="top">&nbsp;</td>
      </tr>
    </table>
   
    <!-- InstanceEndEditable -->
     <!--
     <table width="100%" border="0">
                <tbody>
                        <tr>
                        <td>&#160;</td>
                        <td align="right">
                        <table border="0">
                                <tr>
                                        <td class="right">
                                        <img src="logoicon.gif"/>
                                        </td>
                                </tr>

                         </table>
                         </td>
                        </tr>

                </tbody>
   </table>
   -->

  </body><!-- InstanceEnd -->
</html>
