/* 
 *
 * Copyright  2012, 2013  Freescale Semiconductor
 *
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *     Unless required by applicable law or agreed to in writing, software
 *     distributed under the License is distributed on an "AS IS" BASIS,
 *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *     See the License for the specific language governing permissions and
 *     limitations under the License.
*/

/*
 *
 * File name: XMLReader.java
 * Author: Freescale Semiconductor
 * Date:   03/13/2013
 * Description: This file is parses the product.xml file to generate
 *              metadata, 'C' structure, macro's and menu.xml files.
 * 
 */

package com.fsl.utils;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.TransformerFactoryConfigurationError;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class XMLReader {

  public static final String REF_STRS_H = "apprefs.h";
  public static final String HEAD_STR =
      "/*This file is automatically generated by UCM Automation Tool*/";
  public static String OUT_DIR = "../output";
  private static final String IGW_INCLUDE = "igwincl.h";
  private static final String DMENUMS_H = "secappl.h";
  private static final String APPID_ENUMS_H = "appids.h";
  private static final String DMMACROS_H = "secappl.h";
  private static final String INPUT_XML_LOC = "../input/xml/";
  private static final String OUTPUT_XML_DM_LOC = "../output/xml/dm/";
  private static final String OUTPUT_XML_DOC_LOC = "../output/xml/doc/";
    

  public static void main(String args[]) {

    try {

      if (args.length == 0 || args.length < 3) {

        System.out
            .println("*******************************************");
        System.out
            .println("USAGE: "
                + "XMLUtils XML_FileName, XSL_FileName, OutputDirectory");
        System.out
            .println("USAGE:"
                + "java XMLUtils c:/product.xml c:/gen_id.xsl c:/output");
        System.out
            .println("*******************************************");
        return;
      }

      String xmlFile = args[0];
      String xslFile = args[1];
      String outputDir = args[2];
      XMLReader.OUT_DIR = args[2];

      System.out.println(xmlFile);
      System.out.println(xslFile);
      System.out.println(outputDir);
      generate(xmlFile, xslFile, outputDir);

    } catch (Exception e) {
      e.printStackTrace();
    }

  }

  private static void generate(String xmlFile, String xslFile,
      String outputDir) throws TransformerFactoryConfigurationError,
      FileNotFoundException, IOException {
    Properties properties = new Properties();
    List<String> namelist = new ArrayList<String>();
    List<String> nameHelpList = new ArrayList<String>();
    List<String> smfileList = new ArrayList<String>();
    List<String> dmFileList = new ArrayList<String>();
    File file = new File("build.properties");
    ValidateSchema valSche = new ValidateSchema();
    properties.load(new FileInputStream(file));
    String idXslFile = properties.getProperty("id.xsl.file");
    String productJsFile = properties.getProperty("product.js.file");
    String prodInfoXslFile = properties.getProperty("prod.info.xsl.file");
    String metadataXslFile = properties.getProperty("metadata.xsl.file");
    String cStructXslFile = properties.getProperty("structure.xsl.file");
    String docViewXslFile = properties.getProperty("docview.xsl.file");
    String helpDocsXslFile = properties.getProperty("help.docs.xsl.file");
    String cliHelpDocXslFile = properties.getProperty("cli.doc.xsl.file");
    String dmHelpDocXslFile = properties.getProperty("dm.doc.xsl.file");
    
    String macroXslFile = properties.getProperty("macro.xsl.file");
    String enumXslFile = properties.getProperty("enum.xsl.file");
    String enumAppIDXslFile = properties.getProperty("appid.enum.xsl.file");
    String menuXslFile = properties.getProperty("menu.xsl.file");
    String idXMLFile = properties.getProperty("temp.id.file");
    String dmXsdFile = properties.getProperty("dm.xsd.file");
    String smXsdFile = properties.getProperty("sm.xsd.file");
    String scrnMetaMapFile = properties.getProperty("scrnmetamap.xml.file");

    int len = 0;
    String nodeID = 0 + "";
    Generate generate = new Generate();
    String outputFile = null;
    try {
      String productFile = xmlFile;
      File productfile = new File(productFile);

      DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
      DocumentBuilder db = dbf.newDocumentBuilder();
      // Read product.xml
      Document doc = db.parse(productfile);
      doc.getDocumentElement().normalize();
      // Generate productinfo.js file.
      if (null != xslFile && !(xslFile.equalsIgnoreCase(""))
                           && prodInfoXslFile.equals(xslFile)) {
        try {
          String output = XMLUtils.transform(xmlFile, xslFile);
          writeData(outputDir + productJsFile, output);
        } catch (Exception e) {
          e.printStackTrace();
          System.exit(1);
        }

    } // if 
      if (null != xslFile
          && !(xslFile.equalsIgnoreCase(""))
          && idXslFile.equals(xslFile)) {
        File idFile = new File(idXMLFile);
        if(!idFile.exists()) {
          String iniIDXml = "\n<root><nodeId>0</nodeId></root>";
          idFile.createNewFile();
          writeData(idXMLFile, iniIDXml);
        }
        XMLNodeReplace.changenodevalue(idXMLFile, idXMLFile, nodeID);
      }
      
      NodeList nodeList = doc.getElementsByTagName("Module");
      if (null != xslFile
          && !(xslFile.equalsIgnoreCase(""))
          && enumAppIDXslFile.trim().equals(xslFile.trim())) {
        
        String cFile = outputDir + APPID_ENUMS_H;
        String appStartOut = HEAD_STR + "\n#ifndef CM_SECIDAPPL_H\n"
                  + "#define CM_SECIDAPPL_H\n"
                  + "typedef enum UCMAPPLID_s {\n"
                  + "CM_ON_DIRECTOR_APPL_ID=0,\n";
        
        generate.writeToFile(cFile, appStartOut);
        
      }      
      
      // For each ModuleNavModel/Module element
      for (int s = 0; s < nodeList.getLength(); s++) {
        Node firstNode = nodeList.item(s);

        if (firstNode.getNodeType() == Node.ELEMENT_NODE) {
          Element firstElement = (Element) firstNode;
          String attrValue = firstElement.getAttribute("name");

          // Open and read Navigational file specified in the
          // attribute @name
          doc = db.parse(INPUT_XML_LOC + attrValue);
          doc.getDocumentElement().normalize();
          NodeList list = doc.getElementsByTagName("node");
          // For each "node" element in Navigational model file
          for (int i = 0; i < list.getLength(); i++) {
            Node node = list.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE) {
              firstElement = (Element) node;
              // Get Data Model file name
              String name = firstElement.getAttribute("name");
              // Get Parent Data Model file name
              String dmFile = firstElement.getAttribute("file");
              // Get Screen Model file name
              String screenFile = firstElement
                  .getAttribute("screen");

              // Add Data Model file names to the list to generate
              // Meta Data later.
              //if (screenFile != "") {
              if (screenFile.trim().length() != 0) {
                namelist.add(name);
                if (null != dmFile && dmFile.trim().length() != 0) {
                  nameHelpList.add(name);
                }
                dmFileList.add(dmFile);
                smfileList.add(screenFile);
                if (null != xslFile && !(xslFile.equalsIgnoreCase(""))
                    && metadataXslFile.equals(xslFile)) {
                  //System.out.println("screenFile= " + INPUT_XML_LOC + screenFile);
                                  outputFile = INPUT_XML_LOC + screenFile;
                  if(!valSche.validateDocument(smXsdFile, INPUT_XML_LOC + screenFile)) {
                    throw new Exception("Validation error");
                  }
                }
              }
              if(null == dmFile || dmFile.trim().length() == 0) {
                continue;
              }
              outputFile = outputDir + dmFile;

              // Validate dmFile
              if(!valSche.validateDocument(dmXsdFile, INPUT_XML_LOC + dmFile)) {
                  throw new Exception("Validation error");
              }
              if (null != xslFile
                  && !(xslFile.equalsIgnoreCase(""))
                  && idXslFile.equals(xslFile)) {

                generate.writeContents(INPUT_XML_LOC
                    + dmFile, xslFile, outputFile);
                doc = db.parse(outputFile);
                doc.getDocumentElement().normalize();
                NodeList tempList = doc.getElementsByTagName("NodeID");

                len += tempList.getLength();
                nodeID = len + "";
                XMLNodeReplace.changenodevalue(idXMLFile,
                    idXMLFile, nodeID);
              }

              if (null != xslFile
                  && !(xslFile.equalsIgnoreCase(""))
                  && cStructXslFile.equals(xslFile)) {
                String temp = "cm" + name.toLowerCase() + ".h";
                String cfile = outputDir + temp;
                generate.writeContents(
                    OUTPUT_XML_DM_LOC + dmFile,
                    xslFile, cfile);
                writeContent(temp, outputDir);
              }
              if (null != xslFile
                  && !(xslFile.equalsIgnoreCase(""))
                  && docViewXslFile.equals(xslFile)) {
                String temp = "ucm" + name.toLowerCase() + ".htm";
                String htmFile = OUTPUT_XML_DOC_LOC + temp;
                generate.writeContents(
                    OUTPUT_XML_DM_LOC + dmFile,
                    xslFile, htmFile);
              }

              if (null != xslFile
                  && !(xslFile.equalsIgnoreCase(""))
                  && macroXslFile.equals(xslFile)) {
                String cfile = outputDir + DMMACROS_H;
                generate.writeContents(
                    OUTPUT_XML_DM_LOC + dmFile,
                    xslFile, cfile);
              }

              if (null != xslFile
                  && !(xslFile.equalsIgnoreCase(""))
                  && enumXslFile.equals(xslFile)) {
                String cfile = outputDir + DMENUMS_H;
                generate.writeContents(
                    OUTPUT_XML_DM_LOC + dmFile,
                    xslFile, cfile);
              }
              if (null != xslFile
                  && !(xslFile.equalsIgnoreCase(""))
                  && enumAppIDXslFile.equals(xslFile)) {
                String cfile = outputDir + APPID_ENUMS_H;

                String appEnmOutput = XMLUtils.transform(
                  OUTPUT_XML_DM_LOC + dmFile, xslFile);
                generate.writeToFile(cfile, appEnmOutput);
              }
              
            }
          } // for
        }
        
      } // for

    } catch (Exception e) {
      //e.printStackTrace();
      System.out.println("outputFile: " + outputFile);
      System.out.println("Error: " + e.getMessage());
      System.exit(1);
    }
    if (null != xslFile
        && !(xslFile.equalsIgnoreCase(""))
        && enumAppIDXslFile.trim().equals(xslFile.trim())) {
      String temp = APPID_ENUMS_H;
      String cFile = outputDir + temp;
      String endStr = "} UCMAPPLID_t; \n#endif"; 
      generate.writeToFile(cFile, endStr);
    }
    if (null != xslFile && !(xslFile.equalsIgnoreCase(""))
        && metadataXslFile.equals(xslFile)) {
      int count = 0;
      try {
         /* Generating screen model to metafile mapping */
         String screenModelMapStr = "<data>";
         DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
         DocumentBuilder db = dbf.newDocumentBuilder();

         for (int j = 0; j < namelist.size(); j++) {
           Document doc = db.parse(INPUT_XML_LOC + smfileList.get(j));
           doc.getDocumentElement().normalize();
           NodeList nodeList = doc.getElementsByTagName("DMPath"); 
           Node firstNode = nodeList.item(0);
           if (firstNode.getNodeType() == Node.ELEMENT_NODE) {
             Element firstElement = (Element) firstNode;
             String temp = firstElement.getFirstChild().getNodeValue();
             screenModelMapStr = screenModelMapStr +  "\n" + "<map path=" + "\""; 
             if(dmFileList.get(j).trim().length() == 0) {
               screenModelMapStr += temp +  ".tmppat\"";
             } else {
               screenModelMapStr += temp + "\"";
             }
           }
           screenModelMapStr = screenModelMapStr + " datamodel=" + "\"" +  dmFileList.get(j) +                                                  "\""  + "\t" +"screen=" + "\"" +smfileList.get(j) + "\"" +
                              "\t" + "meta=" + "\"" + namelist.get(j)+ "_MetaData.xml" + "\""+ "/>";
         }
         screenModelMapStr = screenModelMapStr + "\n" + "</data>";
         //System.out.println(screenModelMapStr);
         writeData(scrnMetaMapFile,screenModelMapStr);

        String output = XMLUtils.transform(xmlFile, xslFile);
        String[] array = output.split("#");
        for (int j = 0; j < array.length && count < namelist.size(); j++) {
          if (array[j].indexOf("root") != -1) {
            String metafile = outputDir + namelist.get(count)
                + "_MetaData.xml";
            writeData(metafile, array[j]);
            count++;
          }
        }

      } catch (Exception e) {
        e.printStackTrace();
        System.exit(1);
      }
    }

    if (null != xslFile && !(xslFile.equalsIgnoreCase(""))
        && cliHelpDocXslFile.equals(xslFile)) {
      try {
        String output = XMLUtils.transform(xmlFile, xslFile);
        writeData(outputDir + "clihelpdoc.htm", output);
      } catch (Exception e) {
        e.printStackTrace();
        System.exit(1);
      }

    }
    if (null != xslFile && !(xslFile.equalsIgnoreCase(""))
                           && dmHelpDocXslFile.equals(xslFile)) {
      try {
        String output = XMLUtils.transform(xmlFile, xslFile);
        writeData(outputDir + "dmdoc.htm", output);
      } catch (Exception e) {
        e.printStackTrace();
        System.exit(1);
      }

    }
    if (null != xslFile && !(xslFile.equalsIgnoreCase(""))
        && helpDocsXslFile.equals(xslFile)) {
      int count = 0;
      try {
        String output = XMLUtils.transform(xmlFile, xslFile);
                                String fileIndex = "<html><head><title>Index:</title></head><body>";
        String[] array = output.split("#");
        //System.out.println("array.length= " + array.length + "\t nameHelpList.size()= " + nameHelpList.size());
        for (int j = 0; j < array.length && count < nameHelpList.size(); j++) {
          if (array[j].indexOf("html") != -1) {
            String helpfile = outputDir 
                              + "ucm" 
                              + ((String)nameHelpList.get(count)).toLowerCase()
                              + ".htm";
            String helpLink = "ucm" 
                              + ((String)nameHelpList.get(count)).toLowerCase() + ".htm";
            try {
              fileIndex += "<a href="+helpLink+">" + array[j].substring(array[j].indexOf("Help :: ") + 8, array[j].indexOf("</title>")) +"</a><br/>";
            } catch (Exception ex1) {
              fileIndex += "<a href=" + helpLink+">" + helpLink.substring(3, helpLink.length()) + "</a><br/>";
            }
            writeData(helpfile, array[j].trim());
            count++;
          } // if 
        } // for
        fileIndex += "</body></html>";
        writeData(outputDir+"helpindex.htm", fileIndex);

      } catch (Exception e) {
        e.printStackTrace();
        System.exit(1);
      }
    }

    if (null != xslFile && !(xslFile.equalsIgnoreCase(""))
        && menuXslFile.trim().equals(xslFile.trim())) {
      String menuFile = outputDir + "menu.xml";
      try {
        generate.writeContents(xmlFile, xslFile, menuFile);
      } catch (Exception ex) {
        ex.printStackTrace();
        System.exit(-1);
      }
    }
    
  }

  private static void writeData(String outFile, String outputValue) {
    
    FileWriter fileWriter = null;
    BufferedWriter buffWriter = null;
    String xmlline = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
    if(outFile.indexOf(".htm") != -1 || outFile.indexOf(".js") != -1) {
      xmlline = "";
    }
    try {
      //System.out.println("writeData::outFile= " + outFile);
      File outputFile = new File(outFile);
      if (!outputFile.exists()) {
        outputFile.createNewFile();
      }
      fileWriter = new FileWriter(outputFile);
      buffWriter = new BufferedWriter(fileWriter);
      buffWriter.write(xmlline);
      buffWriter.write(outputValue);

    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        buffWriter.close();
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
  }
  
  private static void writeContent(String outFile, String outputDir) {
    
    FileWriter fileWriter = null;
    BufferedWriter buffWriter = null;
    String fileName = outputDir + IGW_INCLUDE;
    String include = "#include";
    try {
      File outputFile = new File(fileName);
      if (!outputFile.exists()) {
        outputFile.createNewFile();
      }
      fileWriter = new FileWriter(outputFile, true);
      buffWriter = new BufferedWriter(fileWriter);
      buffWriter.write(include);
      buffWriter.write(" \"");
      buffWriter.write(outFile);
      buffWriter.write("\"");
      buffWriter.newLine();
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      try {
        buffWriter.close();
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
  }

} // class XMLReader
