
#define OF_NEM_MAX_NS_TO_NSID_MAP_ENTRIES 1024
#define OF_NEM_MAX_NSID_TO_DPID_MAP_ENTRIES 1024
#define OF_NEM_MAX_NSID_MAP_ENTRIES_IN_DPIDTBL 64
#define OF_NEM_MAX_VETH_TO_NSID_MAP_ENTRIES 1024
#define OF_NEM_MAX_VETH_MAP_ENTRIES_IN_NSIDTBL 64


#define NEM_MAX_NS_NAME_LEN DPRM_MAX_NAMESPACE_NAME_LEN
#define NEM_MAX_IFACE_NAME_LEN 16
enum of_nem_events
{
   NEM_FIRST_EVENT=0,
   NEM_NS_CREAT_EVENT=NEM_FIRST_EVENT,
   NEM_NS_REMOVE_EVENT,
   NEM_DP_AND_NS_ACTIVE_EVENT,
   NEM_DP_AND_NS_DEACTIVE_EVENT,
   NEM_PETH_CREAT_EVENT,
   NEM_PETH_REMOVE_EVENT,
   NEM_MAX_EVENT
};

/*   This structure will contain the mapping information name space id to name space Name.*/
struct of_nem_ns_info
{
   uint32_t id; /* name space Id generated by NE Mapper module for the Namespace */
   char name[NEM_MAX_NS_NAME_LEN]; /* name of the name space   */
};

struct of_nem_dp_ns_info
{
   uint32_t ns_id;/* Name space Id */
   uint64_t dp_id; /* identifier of datapath */
   uint16_t dp_ns_id; /* generated local Namespace Id*/
//   char namespace_name[NEM_MAX_NS_NAME_LEN + 1];
};

struct of_nem_dp_peth_info
{
   uint64_t dp_id; /* datapath Identifier to which it belongs to */
   int32_t ns_id;
   uint32_t port_id;
   uint32_t peth_id;
   char port_name[NEM_MAX_IFACE_NAME_LEN];
   char peth_name[NEM_MAX_IFACE_NAME_LEN];
   char domain_name[NEM_MAX_IFACE_NAME_LEN];
};

struct of_nem_notification_data{
   /** Name of the switch - valid for all the notification types */
   char namespace_name[NEM_MAX_NS_NAME_LEN + 1];
   /** handle to the datapath - valid for the datapath attach and de-attach notification types */
   uint64_t  dp_id;       
   uint16_t dp_ns_id;       
   uint32_t  ns_id;
   uint32_t port_id;
   char port_name[NEM_MAX_IFACE_NAME_LEN];
   char peth_name[NEM_MAX_IFACE_NAME_LEN];
   char domain_name[NEM_MAX_IFACE_NAME_LEN];
};


typedef void (*of_nem_notifier_fn)(uint32_t notification_type,
      struct of_nem_notification_data,
      void     *callback_arg1,
      void     *callback_arg2);
/*
   prototype for the Application callback function to receive notifications from  Network Element Mapper Module.
   notification_type - Type of the notification
   notification_data - Data related to the notification received from the NEM.
   callback_arg1     - Application's private information passed during registration.
   callback_arg2     - Application's private information passed during registration.
 */

typedef int (*iface_create_p) (char *ns_name, uint32_t nsid, char *peth_ifname,
                int32_t *if_index_p);
typedef int (*iface_delete_p) (char *ns_name, uint32_t nsid, int32_t if_index);

struct of_nem_iface_callbacks
{
        iface_create_p  iface_create;
        iface_delete_p  iface_delete;
};


/******************************************************************************
 * * * * * * * * * * * * * * Events * * * * * * * * * * * * * * * * * * * *
 *******************************************************************************/
int32_t of_nem_register_nem_notifications( uint32_t  notification_type, of_nem_notifier_fn nem_notifier_fn, void * callback_arg1, void *callback_arg2);
/** \ingroup Network_Element_Mapper_API  
  This API registers notifications mapping namespace name for given namespace Identifier. This API can be used by applications to register notifier functions to receive notifications regarding changes in the namespaces in Network Element Mapper module.
  This API takes two callback arguments from Applications which will be passed back as arguments   to the notifier function.  
  Multiple applications may register their notifier functions using this API.
  The registered callback functions are called in the order in which they are registered.
Input :    notification_type    - Specifies the event for which the notification is required.
nem_notifier_fn - Callback function pointer registered by the Application.
callback_arg1   - Argument 1 passed by Application.
callback_arg2   - Argument 2 passed by Application
Return value:     OF_SUCCESS  on successful registration.          OF_FAILURE  remaining cases.
 */
int32_t of_nem_deregister_notifications( uint32_t  notification_type, of_nem_notifier_fn *);

/** \ingroup Network_Element_Mapper_API  
  This API can be used by applications to de-register notifier functions to receive notifications regarding changes in the namespaces in Network Element Mapper module.

  The registered callback functions are called in the order in which they are registered.\n
Input :    notification_type    - or which the Application wishes not to receive any further notifications.
nem_notifier_fn -  Callback function pointer registered by the Application.

Return value:     OF_SUCCESS  on successful de-registration.          OF_FAILURE  remaining cases.

 */

/******************************************************************************
 * * * * * * * * * * * * Namespace to NSID * * * * * * * * * * * * * * * * * * *
 *******************************************************************************/
int32_t of_nem_get_nsid_from_namespace(char *namespace_p,uint32_t *ns_id_p);
int32_t of_nem_ns_2_nsid_db_get_first_map_entry(struct of_nem_ns_info *ns_info_p,
      uint64_t  *map_entry_handle_p);
int32_t of_nem_ns_2_nsid_db_get_next_map_entry(struct of_nem_ns_info *ns_info_p,
      uint64_t *map_entry_handle_p);
int32_t  of_nem_ns_2_nsid_db_get_exact_map_entry(uint64_t handle,
      struct of_nem_ns_info* ns_info_p);
int32_t of_nem_ns_2_nsid_db_get_map_entry_handle(char* name_p, uint64_t* map_entry_handle_p);


/******************************************************************************
 * * * * * * * * * * * * NSID to Namespace  * * * * * * * * * * * * * * * * * * *
 *******************************************************************************/
int32_t of_nem_get_namespace_from_nsid( uint32_t ns_id, char *namespace_p);
int32_t of_nem_nsid_2_ns_db_get_first_map_entry(struct of_nem_ns_info *ns_info_p,
      uint64_t  *map_entry_handle_p);
int32_t of_nem_nsid_2_ns_db_get_next_map_entry(struct of_nem_ns_info *ns_info_p,
      uint64_t *map_entry_handle_p);
int32_t  of_nem_nsid_2_ns_db_get_exact_map_entry(uint64_t handle,
      struct of_nem_ns_info* ns_info_p);
int32_t of_nem_nsid_2_ns_db_get_map_entry_handle(uint32_t ns_id, uint64_t* map_entry_handle_p);


/******************************************************************************
 * * * * * * * * * * * * DPID to NSID * * * * * * * * * * * * * * * * * * *
 *******************************************************************************/
int32_t of_nem_get_nsid_from_dpid_and_dp_ns_id(uint64_t dpid, uint16_t dp_ns_id, uint32_t *ns_id_p);
int32_t of_nem_dpid_2_nsid_db_get_first_map_entry(struct of_nem_dp_ns_info *dp_ns_info_p,
      uint64_t  *map_entry_handle_p);
int32_t of_nem_dpid_2_nsid_db_get_next_map_entry(struct of_nem_dp_ns_info *dp_ns_info_p,
      uint64_t *map_entry_handle_p);
int32_t  of_nem_dpid_2_nsid_db_get_exact_map_entry(uint64_t handle,
      struct of_nem_dp_ns_info* dp_ns_info_p);
int32_t of_nem_dpid_2_nsid_db_get_map_entry_handle(uint64_t dpid, uint16_t dp_ns_id, uint64_t* map_entry_handle_p);

/******************************************************************************
 * * * * * * * * * * * * NSID to DPID * * * * * * * * * * * * * * * * * * *
 *******************************************************************************/
int32_t of_nem_get_dpid_and_dp_ns_id_from_ns_id(uint32_t ns_id, uint64_t *dpid, uint16_t *dp_ns_id);
int32_t of_nem_nsid_2_dpid_db_get_first_map_entry(struct of_nem_dp_ns_info *dp_ns_info_p,
      uint64_t  *map_entry_handle_p);
int32_t of_nem_nsid_2_dpid_db_get_next_map_entry(struct of_nem_dp_ns_info *dp_ns_info_p,
      uint64_t *map_entry_handle_p);
int32_t  of_nem_nsid_2_dpid_db_get_exact_map_entry(uint64_t handle,
      struct of_nem_dp_ns_info* dp_ns_info_p);
int32_t of_nem_nsid_2_dpid_db_get_map_entry_handle(uint32_t ns_id, uint64_t* map_entry_handle_p);

/******************************************************************************
 * * * * * * * * * * * * DPID to PETH * * * * * * * * * * * * * * * * * * *
 *******************************************************************************/
int32_t of_nem_get_nsid_and_peth_from_dpid_and_port_id(uint64_t dp_id, uint32_t port_id, uint32_t *ns_id_p, char *peth_name, uint32_t *peth_id);
int32_t of_nem_dpid_2_peth_db_get_first_map_entry(struct of_nem_dp_peth_info *dp_peth_info_p,
      uint64_t  *map_entry_handle_p);
int32_t of_nem_dpid_2_peth_db_get_next_map_entry(struct of_nem_dp_peth_info *dp_peth_info_p,
      uint64_t *map_entry_handle_p);
int32_t  of_nem_dpid_2_peth_db_get_exact_map_entry(uint64_t handle,
      struct of_nem_dp_peth_info* dp_peth_info_p);
int32_t of_nem_dpid_2_peth_db_get_map_entry_handle(uint64_t dp_id, uint32_t port_id, uint64_t* map_entry_handle_p);


/******************************************************************************
 * * * * * * * * * * * * PETH to DPID * * * * * * * * * * * * * * * * * * *
 *******************************************************************************/
int32_t of_nem_get_dpid_and_port_id_from_nsid_and_peth_name(uint32_t ns_id, char *peth_name, uint64_t *dp_id_p, uint32_t *port_id_p);
int32_t of_nem_peth_2_dpid_db_get_first_map_entry(struct of_nem_dp_peth_info *dp_peth_info_p,
      uint64_t  *map_entry_handle_p);
int32_t of_nem_peth_2_dpid_db_get_next_map_entry(struct of_nem_dp_peth_info *dp_peth_info_p,
      uint64_t *map_entry_handle_p);
int32_t  of_nem_peth_2_dpid_db_get_exact_map_entry(uint64_t handle,
      struct of_nem_dp_peth_info* dp_peth_info_p);
int32_t of_nem_peth_2_dpid_db_get_map_entry_handle(uint32_t ns_id, char *peth_name, uint64_t* map_entry_handle_p);

/******************************************************************************
 * * * * * * * * * * * * DPID and DPNSID  * * * * * * * * * * * * * * * * * * *
 *******************************************************************************/
int32_t of_nem_get_dpnsid_from_dpid_and_namespace(uint64_t dp_id, char *namespace_p, uint16_t *dp_ns_id_p);
